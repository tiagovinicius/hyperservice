tasks:
  run:
    command: "air"
  test:
    command: "go test -v ./..."
  version:
    script: |
      # Read current version from version.txt
      VERSION=$(cat version.txt)

      # Extract the base name (app name) and the current version
      BASE_NAME=$(echo "$VERSION" | cut -d'-' -f1)
      CURRENT_VERSION=$(echo "$VERSION" | cut -d'-' -f2-)

      # Increment PATCH version (you can modify this for MINOR or MAJOR as needed)
      NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. -v OFS=. '{$NF++;print}')
      NEW_VERSION=$(echo "$NEW_VERSION" | sed 's/\.\.$//')

      # Combine the base name with the new version
      NEW_FULL_VERSION="$BASE_NAME-$NEW_VERSION"

      # Update version.txt with the new version
      echo "$NEW_FULL_VERSION" > version.txt

      go build -ldflags "-X main.version=$NEW_FULL_VERSION"
  tag: 
    script: |
      LOCK_FILE="/tmp/git_lock"
      # Wait until the lock file is removed (i.e., no other process is running Git operations)
      while [ -e "$LOCK_FILE" ]; do
        echo "Git operation is locked, waiting..."
        sleep 1  # Check every second
      done
      # Create the lock file to indicate that Git operations are in progress
      touch "$LOCK_FILE"

      # Read current version from version.txt
      VERSION=$(cat version.txt)

      # Commit version.txt update
      git add version.txt
      git commit -m "Bump version to $VERSION"

      # Push the commit and the version tag
      git push

      # Rename the binary to include the version
      mv ./bin/main "./bin/$VERSION"

      # Remove lock file to indicate completion
      rm "$LOCK_FILE"
      echo "Git operations completed and lock released."